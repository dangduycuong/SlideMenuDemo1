//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `PlayfairDisplay-Bold.ttf`.
    static let playfairDisplayBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PlayfairDisplay-Bold", pathExtension: "ttf")
    /// Resource file `PlayfairDisplay-Regular.ttf`.
    static let playfairDisplayRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "PlayfairDisplay-Regular", pathExtension: "ttf")
    /// Resource file `Thuoc.json`.
    static let thuocJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Thuoc", pathExtension: "json")
    /// Resource file `medicinal_plants.json`.
    static let medicinal_plantsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "medicinal_plants", pathExtension: "json")

    /// `bundle.url(forResource: "PlayfairDisplay-Bold", withExtension: "ttf")`
    static func playfairDisplayBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.playfairDisplayBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PlayfairDisplay-Regular", withExtension: "ttf")`
    static func playfairDisplayRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.playfairDisplayRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Thuoc", withExtension: "json")`
    static func thuocJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.thuocJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "medicinal_plants", withExtension: "json")`
    static func medicinal_plantsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.medicinal_plantsJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `PlayfairDisplay-Bold`.
    static let playfairDisplayBold = Rswift.FontResource(fontName: "PlayfairDisplay-Bold")
    /// Font `PlayfairDisplay-Regular`.
    static let playfairDisplayRegular = Rswift.FontResource(fontName: "PlayfairDisplay-Regular")

    /// `UIFont(name: "PlayfairDisplay-Bold", size: ...)`
    static func playfairDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: playfairDisplayBold, size: size)
    }

    /// `UIFont(name: "PlayfairDisplay-Regular", size: ...)`
    static func playfairDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: playfairDisplayRegular, size: size)
    }

    static func validate() throws {
      if R.font.playfairDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PlayfairDisplay-Bold' could not be loaded, is 'PlayfairDisplay-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.playfairDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'PlayfairDisplay-Regular' could not be loaded, is 'PlayfairDisplay-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 41 images.
  struct image {
    /// Image `Bạch-hoa-xà-thiệt-thảo`.
    static let bạchHoaXàThiệtThảo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bạch-hoa-xà-thiệt-thảo")
    /// Image `bồ-công-anh1`.
    static let bồCôngAnh1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bồ-công-anh1")
    /// Image `cay-bac-ha`.
    static let cayBacHa = Rswift.ImageResource(bundle: R.hostingBundle, name: "cay-bac-ha")
    /// Image `cay-bach-bo`.
    static let cayBachBo = Rswift.ImageResource(bundle: R.hostingBundle, name: "cay-bach-bo")
    /// Image `cay-bach-dong-nu`.
    static let cayBachDongNu = Rswift.ImageResource(bundle: R.hostingBundle, name: "cay-bach-dong-nu")
    /// Image `cay-co-sua-la-nho`.
    static let cayCoSuaLaNho = Rswift.ImageResource(bundle: R.hostingBundle, name: "cay-co-sua-la-nho")
    /// Image `cay-cuc-tan`.
    static let cayCucTan = Rswift.ImageResource(bundle: R.hostingBundle, name: "cay-cuc-tan")
    /// Image `cay-dinh-lang`.
    static let cayDinhLang = Rswift.ImageResource(bundle: R.hostingBundle, name: "cay-dinh-lang")
    /// Image `cay-don-la-do`.
    static let cayDonLaDo = Rswift.ImageResource(bundle: R.hostingBundle, name: "cay-don-la-do")
    /// Image `close-small`.
    static let closeSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "close-small")
    /// Image `cây-bán-hạ-nam`.
    static let câyBánHạNam = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-bán-hạ-nam")
    /// Image `cây-bố-chính-sâm`.
    static let câyBốChínhSâm = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-bố-chính-sâm")
    /// Image `cây-cam-thảo-đất`.
    static let câyCamThảoĐất = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-cam-thảo-đất")
    /// Image `cây-cà-gai-leo`.
    static let câyCàGaiLeo = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-cà-gai-leo")
    /// Image `cây-cúc-hoa`.
    static let câyCúcHoa = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-cúc-hoa")
    /// Image `cây-cỏ-mần-trầu`.
    static let câyCỏMầnTrầu = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-cỏ-mần-trầu")
    /// Image `cây-cỏ-nhọ-nồi`.
    static let câyCỏNhọNồi = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-cỏ-nhọ-nồi")
    /// Image `cây-cỏ-xước`.
    static let câyCỏXước = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-cỏ-xước")
    /// Image `cây-cối-xay`.
    static let câyCốiXay = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-cối-xay")
    /// Image `cây-cốt-khí`.
    static let câyCốtKhí = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-cốt-khí")
    /// Image `cây-diệp-hạ-châu`.
    static let câyDiệpHạChâu = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-diệp-hạ-châu")
    /// Image `cây-dành-dành`.
    static let câyDànhDành = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-dành-dành")
    /// Image `cây-dâu-tằm`.
    static let câyDâuTằm = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-dâu-tằm")
    /// Image `cây-dừa-cạn`.
    static let câyDừaCạn = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-dừa-cạn")
    /// Image `cây-gai-1`.
    static let câyGai1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-gai-1")
    /// Image `cây-gừng`.
    static let câyGừng = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-gừng")
    /// Image `cây-hoắc-hương`.
    static let câyHoắcHương = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-hoắc-hương")
    /// Image `cây-huyết-dụ`.
    static let câyHuyếtDụ = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-huyết-dụ")
    /// Image `cây-hy-thiêm`.
    static let câyHyThiêm = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-hy-thiêm")
    /// Image `cây-húng-chanh`.
    static let câyHúngChanh = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-húng-chanh")
    /// Image `cây-hương-nhu-tía`.
    static let câyHươngNhuTía = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-hương-nhu-tía")
    /// Image `cây-hạ-khô-thảo`.
    static let câyHạKhôThảo = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-hạ-khô-thảo")
    /// Image `cây-khổ-sâm-cho-lá`.
    static let câyKhổSâmChoLá = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-khổ-sâm-cho-lá")
    /// Image `cây-kim-ngân-hoa`.
    static let câyKimNgânHoa = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-kim-ngân-hoa")
    /// Image `cây-kim-tiền-thảo`.
    static let câyKimTiềnThảo = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-kim-tiền-thảo")
    /// Image `cây-ké-đầu-ngựa`.
    static let câyKéĐầuNgựa = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-ké-đầu-ngựa")
    /// Image `cây-ích-mẫu`.
    static let câyÍchMẫu = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-ích-mẫu")
    /// Image `cây-địa-hoàng`.
    static let câyĐịaHoàng = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-địa-hoàng")
    /// Image `cây-địa-liền`.
    static let câyĐịaLiền = Rswift.ImageResource(bundle: R.hostingBundle, name: "cây-địa-liền")
    /// Image `cỏ-tranh`.
    static let cỏTranh = Rswift.ImageResource(bundle: R.hostingBundle, name: "cỏ-tranh")
    /// Image `icons8-sort_down`.
    static let icons8Sort_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-sort_down")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bạch-hoa-xà-thiệt-thảo", bundle: ..., traitCollection: ...)`
    static func bạchHoaXàThiệtThảo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bạchHoaXàThiệtThảo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bồ-công-anh1", bundle: ..., traitCollection: ...)`
    static func bồCôngAnh1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bồCôngAnh1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cay-bac-ha", bundle: ..., traitCollection: ...)`
    static func cayBacHa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cayBacHa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cay-bach-bo", bundle: ..., traitCollection: ...)`
    static func cayBachBo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cayBachBo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cay-bach-dong-nu", bundle: ..., traitCollection: ...)`
    static func cayBachDongNu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cayBachDongNu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cay-co-sua-la-nho", bundle: ..., traitCollection: ...)`
    static func cayCoSuaLaNho(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cayCoSuaLaNho, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cay-cuc-tan", bundle: ..., traitCollection: ...)`
    static func cayCucTan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cayCucTan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cay-dinh-lang", bundle: ..., traitCollection: ...)`
    static func cayDinhLang(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cayDinhLang, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cay-don-la-do", bundle: ..., traitCollection: ...)`
    static func cayDonLaDo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cayDonLaDo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close-small", bundle: ..., traitCollection: ...)`
    static func closeSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-bán-hạ-nam", bundle: ..., traitCollection: ...)`
    static func câyBánHạNam(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyBánHạNam, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-bố-chính-sâm", bundle: ..., traitCollection: ...)`
    static func câyBốChínhSâm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyBốChínhSâm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-cam-thảo-đất", bundle: ..., traitCollection: ...)`
    static func câyCamThảoĐất(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyCamThảoĐất, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-cà-gai-leo", bundle: ..., traitCollection: ...)`
    static func câyCàGaiLeo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyCàGaiLeo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-cúc-hoa", bundle: ..., traitCollection: ...)`
    static func câyCúcHoa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyCúcHoa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-cỏ-mần-trầu", bundle: ..., traitCollection: ...)`
    static func câyCỏMầnTrầu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyCỏMầnTrầu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-cỏ-nhọ-nồi", bundle: ..., traitCollection: ...)`
    static func câyCỏNhọNồi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyCỏNhọNồi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-cỏ-xước", bundle: ..., traitCollection: ...)`
    static func câyCỏXước(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyCỏXước, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-cối-xay", bundle: ..., traitCollection: ...)`
    static func câyCốiXay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyCốiXay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-cốt-khí", bundle: ..., traitCollection: ...)`
    static func câyCốtKhí(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyCốtKhí, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-diệp-hạ-châu", bundle: ..., traitCollection: ...)`
    static func câyDiệpHạChâu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyDiệpHạChâu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-dành-dành", bundle: ..., traitCollection: ...)`
    static func câyDànhDành(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyDànhDành, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-dâu-tằm", bundle: ..., traitCollection: ...)`
    static func câyDâuTằm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyDâuTằm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-dừa-cạn", bundle: ..., traitCollection: ...)`
    static func câyDừaCạn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyDừaCạn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-gai-1", bundle: ..., traitCollection: ...)`
    static func câyGai1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyGai1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-gừng", bundle: ..., traitCollection: ...)`
    static func câyGừng(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyGừng, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-hoắc-hương", bundle: ..., traitCollection: ...)`
    static func câyHoắcHương(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyHoắcHương, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-huyết-dụ", bundle: ..., traitCollection: ...)`
    static func câyHuyếtDụ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyHuyếtDụ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-hy-thiêm", bundle: ..., traitCollection: ...)`
    static func câyHyThiêm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyHyThiêm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-húng-chanh", bundle: ..., traitCollection: ...)`
    static func câyHúngChanh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyHúngChanh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-hương-nhu-tía", bundle: ..., traitCollection: ...)`
    static func câyHươngNhuTía(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyHươngNhuTía, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-hạ-khô-thảo", bundle: ..., traitCollection: ...)`
    static func câyHạKhôThảo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyHạKhôThảo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-khổ-sâm-cho-lá", bundle: ..., traitCollection: ...)`
    static func câyKhổSâmChoLá(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyKhổSâmChoLá, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-kim-ngân-hoa", bundle: ..., traitCollection: ...)`
    static func câyKimNgânHoa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyKimNgânHoa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-kim-tiền-thảo", bundle: ..., traitCollection: ...)`
    static func câyKimTiềnThảo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyKimTiềnThảo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-ké-đầu-ngựa", bundle: ..., traitCollection: ...)`
    static func câyKéĐầuNgựa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyKéĐầuNgựa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-ích-mẫu", bundle: ..., traitCollection: ...)`
    static func câyÍchMẫu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyÍchMẫu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-địa-hoàng", bundle: ..., traitCollection: ...)`
    static func câyĐịaHoàng(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyĐịaHoàng, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cây-địa-liền", bundle: ..., traitCollection: ...)`
    static func câyĐịaLiền(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.câyĐịaLiền, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cỏ-tranh", bundle: ..., traitCollection: ...)`
    static func cỏTranh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cỏTranh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icons8-sort_down", bundle: ..., traitCollection: ...)`
    static func icons8Sort_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8Sort_down, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `DropDownSelectView`.
    static let dropDownSelectView = _R.nib._DropDownSelectView()
    /// Nib `MedicinalTableViewCell`.
    static let medicinalTableViewCell = _R.nib._MedicinalTableViewCell()
    /// Nib `SearchDocumentView`.
    static let searchDocumentView = _R.nib._SearchDocumentView()
    /// Nib `SearchView`.
    static let searchView = _R.nib._SearchView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DropDownSelectView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dropDownSelectView) instead")
    static func dropDownSelectView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dropDownSelectView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MedicinalTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.medicinalTableViewCell) instead")
    static func medicinalTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.medicinalTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchDocumentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchDocumentView) instead")
    static func searchDocumentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchDocumentView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchView) instead")
    static func searchView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchView)
    }
    #endif

    static func dropDownSelectView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DropDownSelectView? {
      return R.nib.dropDownSelectView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DropDownSelectView
    }

    static func medicinalTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MedicinalTableViewCell? {
      return R.nib.medicinalTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MedicinalTableViewCell
    }

    static func searchDocumentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchDocumentView? {
      return R.nib.searchDocumentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchDocumentView
    }

    static func searchView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchView? {
      return R.nib.searchView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _DropDownSelectView.validate()
      try _SearchDocumentView.validate()
      try _SearchView.validate()
    }

    struct _DropDownSelectView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DropDownSelectView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DropDownSelectView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DropDownSelectView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icons8-sort_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icons8-sort_down' is used in nib 'DropDownSelectView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MedicinalTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MedicinalTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MedicinalTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MedicinalTableViewCell
      }

      fileprivate init() {}
    }

    struct _SearchDocumentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchDocumentView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchDocumentView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchDocumentView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "close-small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close-small' is used in nib 'SearchDocumentView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SearchView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "close-small", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close-small' is used in nib 'SearchView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let detailMedicinalViewController = StoryboardViewControllerResource<DetailMedicinalViewController>(identifier: "DetailMedicinalViewController")
      let medicinalPlantsViewController = StoryboardViewControllerResource<MedicinalPlantsViewController>(identifier: "MedicinalPlantsViewController")
      let name = "Main"
      let viewController = StoryboardViewControllerResource<ViewController>(identifier: "ViewController")

      func detailMedicinalViewController(_: Void = ()) -> DetailMedicinalViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailMedicinalViewController)
      }

      func medicinalPlantsViewController(_: Void = ()) -> MedicinalPlantsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: medicinalPlantsViewController)
      }

      func viewController(_: Void = ()) -> ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().detailMedicinalViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailMedicinalViewController' could not be loaded from storyboard 'Main' as 'DetailMedicinalViewController'.") }
        if _R.storyboard.main().medicinalPlantsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'medicinalPlantsViewController' could not be loaded from storyboard 'Main' as 'MedicinalPlantsViewController'.") }
        if _R.storyboard.main().viewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'Main' as 'ViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
